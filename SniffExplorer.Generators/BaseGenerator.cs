using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using SniffExplorer.Generators.Utilities;

namespace SniffExplorer.Generators
{
    public abstract class BaseGenerator : ISourceGenerator
    {
        public abstract void Initialize(GeneratorInitializationContext context);
        public abstract void Execute(GeneratorExecutionContext context);

        internal IndentedStringBuilder CreateBuilder()
        {
            var builder = new IndentedStringBuilder();
            builder.AppendLineInvariant("// AUTOGENERATED FILE - DO NOT EDIT");
            builder.AppendLineInvariant($"// This file was generated by {GetType().Name} on {DateTime.Now}.");
            builder.AppendLine();

            return builder;
        }

        protected class Diagnostic
        {
            public string ID { get; set; }
            public string Category { get; set; }
            public string Title { get; set; }
            public string Message { get; set; }
            public string? Description { get; set; }
            public DiagnosticSeverity Severity { get; set; }

            public void Report(GeneratorExecutionContext context, IEnumerable<Location> locations, DiagnosticSeverity severity, object[] messageArgs)
            {
                var descriptor = new DiagnosticDescriptor(ID, Title, Message, Category, severity, true, Description);
                var diagnostic = Microsoft.CodeAnalysis.Diagnostic.Create(descriptor, locations.First(), locations.Skip(1), messageArgs);
                context.ReportDiagnostic(diagnostic);
            }

            public void Report(GeneratorExecutionContext context, IEnumerable<Location> locations, params object[] messageArgs)
                => Report(context, locations, Severity, messageArgs);
        }
    }
}
