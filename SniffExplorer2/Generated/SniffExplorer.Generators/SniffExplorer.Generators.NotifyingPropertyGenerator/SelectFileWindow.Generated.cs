// AUTOGENERATED FILE - DO NOT EDIT
// This file was generated by NotifyingPropertyGenerator on 4/10/2021 1:25:47 PM.
using System;
using System.Collections.Generic;
using System.ComponentModel;

namespace SniffExplorer.UI.Windows
{
    public partial class SelectFileWindow : System.Windows.Window, System.ComponentModel.INotifyPropertyChanged
    {
        
        public string FilePath
        {
            get => _filePath;
            set {
                if (EqualityComparer<string>.Default.Equals(_filePath, value))
                    return;

                BeforeFilePathChange(_filePath, value);
                _filePath = value;
                AfterFilePathChange();
                NotifyPropertyChanged(nameof(FilePath));
            }
        }

        partial void BeforeFilePathChange(string oldValue, string newValue);
        partial void AfterFilePathChange();
        
        public bool IgnoreDescriptors
        {
            get => _ignoreDescriptors;
            set {
                if (EqualityComparer<bool>.Default.Equals(_ignoreDescriptors, value))
                    return;

                BeforeIgnoreDescriptorsChange(_ignoreDescriptors, value);
                _ignoreDescriptors = value;
                AfterIgnoreDescriptorsChange();
                NotifyPropertyChanged(nameof(IgnoreDescriptors));
            }
        }

        partial void BeforeIgnoreDescriptorsChange(bool oldValue, bool newValue);
        partial void AfterIgnoreDescriptorsChange();
        
        public bool IgnorePlayers
        {
            get => _ignorePlayers;
            set {
                if (EqualityComparer<bool>.Default.Equals(_ignorePlayers, value))
                    return;

                BeforeIgnorePlayersChange(_ignorePlayers, value);
                _ignorePlayers = value;
                AfterIgnorePlayersChange();
                NotifyPropertyChanged(nameof(IgnorePlayers));
            }
        }

        partial void BeforeIgnorePlayersChange(bool oldValue, bool newValue);
        partial void AfterIgnorePlayersChange();
        

        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        

        
        protected void NotifyPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
    }
}
