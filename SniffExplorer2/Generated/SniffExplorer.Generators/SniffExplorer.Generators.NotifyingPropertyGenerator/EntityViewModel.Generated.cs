// AUTOGENERATED FILE - DO NOT EDIT
// This file was generated by NotifyingPropertyGenerator on 4/6/2021 1:34:14 AM.
using System;
using System.Collections.Generic;
using System.ComponentModel;

namespace SniffExplorer.UI.Controls.Models
{
    public partial class EntityViewModel<T, U> : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        public string NameFilter
        {
            get => _nameFilter;
            set {
                if (EqualityComparer<string>.Default.Equals(_nameFilter, value))
                    return;

                BeforeNameFilterChange(_nameFilter, value);
                _nameFilter = value;
                AfterNameFilterChange();
                NotifyPropertyChanged(nameof(NameFilter));
            }
        }

        partial void BeforeNameFilterChange(string oldValue, string newValue);
        partial void AfterNameFilterChange();
        
        public System.ComponentModel.ICollectionView EntitiesView
        {
            get => _entitiesView;
            set {
                if (EqualityComparer<System.ComponentModel.ICollectionView>.Default.Equals(_entitiesView, value))
                    return;

                BeforeEntitiesViewChange(_entitiesView, value);
                _entitiesView = value;
                AfterEntitiesViewChange();
                NotifyPropertyChanged(nameof(EntitiesView));
            }
        }

        partial void BeforeEntitiesViewChange(System.ComponentModel.ICollectionView oldValue, System.ComponentModel.ICollectionView newValue);
        partial void AfterEntitiesViewChange();
        

        

        
        protected void NotifyPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        
    }
}
