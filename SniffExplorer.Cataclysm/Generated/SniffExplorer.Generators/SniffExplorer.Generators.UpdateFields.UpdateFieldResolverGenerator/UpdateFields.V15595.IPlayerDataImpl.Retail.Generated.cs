// AUTOGENERATED FILE - DO NOT EDIT
// This file was generated by UpdateFieldResolverGenerator on 4/9/2021 11:13:30 PM.

using SniffExplorer.Parsing.Types;
using SniffExplorer.Parsing.Engine;
using SniffExplorer.Parsing.Engine.Tracking;
using SniffExplorer.Parsing.Engine.Tracking.UpdateFields;
using SniffExplorer.Parsing.Engine.Tracking.UpdateFields.Implementations;

namespace SniffExplorer.Cataclysm.UpdateFields.V4_3_4_15595.Retail
{
    [SniffExplorer.Shared.Attributes.Descriptors.GeneratedDescriptorAttribute(ClientBuild = 15595, RealmType = SniffExplorer.Shared.Enums.RealmExpansionType.Retail)]
    public class IPlayerDataImpl : SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IPlayerData
    {
        public int BitCount { get; }

        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField DuelArbiter { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField FLAGS { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField GuildRank { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField GuildDeleteDate { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField GuildLevel { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Bytes0 { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Bytes1 { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Bytes2 { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField DuelTeam { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField GuildTimestamp { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] QuestLog { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] VisibleItems { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ChosenTitle { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField FakeInebriation { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField FIELD_PAD_0 { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] InventorySlots { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] VendorBuyBackSlots { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Farsight { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField KnownTitles { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField XP { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField NextLevelXP { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] SkillLineIDs { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] SkillSteps { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] SkillRanks { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] SkillMaxRanks { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] SkillModifiers { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] SkillTalents { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField CharacterPoints { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField TrackCreatures { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField TrackResources { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Expertise { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField OffHandExpertise { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField BlockPercentage { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField DodgePercentage { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ParryPercentage { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField CritPercentage { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField RangedCritPercentage { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField OffHandCritPercentage { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] SpellCritPercentages { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ShieldBlock { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ShieldBlockCritPercentage { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Mastery { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ExploredZones { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField RestStateExperience { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Coinage { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] ModDamageDonePos { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] ModDamageDoneNeg { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] ModDamageDonePct { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ModHealingDonePos { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ModHealingPct { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ModHealingDonePct { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] WeaponDamageMultipliers { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ModSpellPowerPCT { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField OverrideSpellPowerByApPct { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ModTargetResistance { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ModTargetPhysicalResistance { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField FIELD_BYTES { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField SelfResurrectionSpell { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField PvPMedals { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] BuyBackPrices { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] BuyBackTimestamp { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Kills { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField LifetimeHonorableKills { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Bytes3 { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField WatchedFactionIndex { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] CombatRatings { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] ArenaTeamInfos { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField BattlegroundRating { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField MaxLevel { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] DailyQuests { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] RuneRegen { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] NoReagentCost { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] GlyphSlots { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] Glyphs { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField GlyphsEnabled { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField PetSpellPower { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Researching { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ResearchSites { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] ProfessionSkillLines { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField UiHitModifier { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField UiSpellHitModifier { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField HomeRealmTimeOffset { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ModHaste { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ModRangedHaste { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ModPetHaste { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField ModHasteRegen { get; }

        public IPlayerDataImpl(ParsingContext context)
        {
            DuelArbiter = new GuidUpdateField(0, context);
            FLAGS = new PrimitiveUpdateField<uint>(DuelArbiter.BitEnd, context);
            GuildRank = new PrimitiveUpdateField<uint>(FLAGS.BitEnd, context);
            GuildDeleteDate = new PrimitiveUpdateField<uint>(GuildRank.BitEnd, context);
            GuildLevel = new PrimitiveUpdateField<uint>(GuildDeleteDate.BitEnd, context);
            Bytes0 = new RawUpdateField<System.Byte>(GuildLevel.BitEnd, context);
            Bytes1 = new RawUpdateField<System.Byte>(Bytes0.BitEnd, context);
            Bytes2 = new RawUpdateField<System.Byte>(Bytes1.BitEnd, context);
            DuelTeam = new PrimitiveUpdateField<uint>(Bytes2.BitEnd, context);
            GuildTimestamp = new PrimitiveUpdateField<uint>(DuelTeam.BitEnd, context);

            QuestLog = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[50];
            QuestLog[0] = new StructuredUpdateField<SniffExplorer.Cataclysm.UpdateFields.Types.QuestData>(GuildTimestamp.BitEnd, 5, context, values => new SniffExplorer.Cataclysm.UpdateFields.Types.QuestData(values));
            for (var itr0 = 1; itr0 < 50; ++itr0)
                QuestLog[itr0] = new StructuredUpdateField<SniffExplorer.Cataclysm.UpdateFields.Types.QuestData>(QuestLog[itr0 - 1].BitEnd, 5, context, values => new SniffExplorer.Cataclysm.UpdateFields.Types.QuestData(values));


            VisibleItems = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[19];
            VisibleItems[0] = new StructuredUpdateField<SniffExplorer.Cataclysm.UpdateFields.Types.VisibleItem>(QuestLog[49].BitEnd, 2, context, values => new SniffExplorer.Cataclysm.UpdateFields.Types.VisibleItem(values));
            for (var itr0 = 1; itr0 < 19; ++itr0)
                VisibleItems[itr0] = new StructuredUpdateField<SniffExplorer.Cataclysm.UpdateFields.Types.VisibleItem>(VisibleItems[itr0 - 1].BitEnd, 2, context, values => new SniffExplorer.Cataclysm.UpdateFields.Types.VisibleItem(values));

            ChosenTitle = new PrimitiveUpdateField<uint>(VisibleItems[18].BitEnd, context);
            FakeInebriation = new PrimitiveUpdateField<uint>(ChosenTitle.BitEnd, context);
            FIELD_PAD_0 = new PrimitiveUpdateField<uint>(FakeInebriation.BitEnd, context);

            InventorySlots = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[74];
            InventorySlots[0] = new GuidUpdateField(FIELD_PAD_0.BitEnd, context);
            for (var itr0 = 1; itr0 < 74; ++itr0)
                InventorySlots[itr0] = new GuidUpdateField(InventorySlots[itr0 - 1].BitEnd, context);


            VendorBuyBackSlots = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[12];
            VendorBuyBackSlots[0] = new GuidUpdateField(InventorySlots[73].BitEnd, context);
            for (var itr0 = 1; itr0 < 12; ++itr0)
                VendorBuyBackSlots[itr0] = new GuidUpdateField(VendorBuyBackSlots[itr0 - 1].BitEnd, context);

            Farsight = new GuidUpdateField(VendorBuyBackSlots[11].BitEnd, context);
            KnownTitles = new BlobUpdateField(Farsight.BitEnd, 32, context);
            XP = new PrimitiveUpdateField<uint>(KnownTitles.BitEnd, context);
            NextLevelXP = new PrimitiveUpdateField<uint>(XP.BitEnd, context);

            SkillLineIDs = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[64];
            SkillLineIDs[0] = new RawUpdateField<System.UInt16>(NextLevelXP.BitEnd, context);
            for (var itr0 = 1; itr0 < 64; ++itr0)
                SkillLineIDs[itr0] = new RawUpdateField<System.UInt16>(SkillLineIDs[itr0 - 1].BitEnd, context);


            SkillSteps = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[64];
            SkillSteps[0] = new RawUpdateField<System.UInt16>(SkillLineIDs[63].BitEnd, context);
            for (var itr0 = 1; itr0 < 64; ++itr0)
                SkillSteps[itr0] = new RawUpdateField<System.UInt16>(SkillSteps[itr0 - 1].BitEnd, context);


            SkillRanks = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[64];
            SkillRanks[0] = new RawUpdateField<System.UInt16>(SkillSteps[63].BitEnd, context);
            for (var itr0 = 1; itr0 < 64; ++itr0)
                SkillRanks[itr0] = new RawUpdateField<System.UInt16>(SkillRanks[itr0 - 1].BitEnd, context);


            SkillMaxRanks = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[64];
            SkillMaxRanks[0] = new RawUpdateField<System.UInt16>(SkillRanks[63].BitEnd, context);
            for (var itr0 = 1; itr0 < 64; ++itr0)
                SkillMaxRanks[itr0] = new RawUpdateField<System.UInt16>(SkillMaxRanks[itr0 - 1].BitEnd, context);


            SkillModifiers = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[64];
            SkillModifiers[0] = new RawUpdateField<System.UInt16>(SkillMaxRanks[63].BitEnd, context);
            for (var itr0 = 1; itr0 < 64; ++itr0)
                SkillModifiers[itr0] = new RawUpdateField<System.UInt16>(SkillModifiers[itr0 - 1].BitEnd, context);


            SkillTalents = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[64];
            SkillTalents[0] = new RawUpdateField<System.UInt16>(SkillModifiers[63].BitEnd, context);
            for (var itr0 = 1; itr0 < 64; ++itr0)
                SkillTalents[itr0] = new RawUpdateField<System.UInt16>(SkillTalents[itr0 - 1].BitEnd, context);

            CharacterPoints = new PrimitiveUpdateField<uint>(SkillTalents[63].BitEnd, context);
            TrackCreatures = new PrimitiveUpdateField<uint>(CharacterPoints.BitEnd, context);
            TrackResources = new PrimitiveUpdateField<uint>(TrackCreatures.BitEnd, context);
            Expertise = new PrimitiveUpdateField<uint>(TrackResources.BitEnd, context);
            OffHandExpertise = new PrimitiveUpdateField<uint>(Expertise.BitEnd, context);
            BlockPercentage = new PrimitiveUpdateField<float>(OffHandExpertise.BitEnd, context);
            DodgePercentage = new PrimitiveUpdateField<float>(BlockPercentage.BitEnd, context);
            ParryPercentage = new PrimitiveUpdateField<float>(DodgePercentage.BitEnd, context);
            CritPercentage = new PrimitiveUpdateField<float>(ParryPercentage.BitEnd, context);
            RangedCritPercentage = new PrimitiveUpdateField<float>(CritPercentage.BitEnd, context);
            OffHandCritPercentage = new PrimitiveUpdateField<float>(RangedCritPercentage.BitEnd, context);

            SpellCritPercentages = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[7];
            SpellCritPercentages[0] = new PrimitiveUpdateField<float>(OffHandCritPercentage.BitEnd, context);
            for (var itr0 = 1; itr0 < 7; ++itr0)
                SpellCritPercentages[itr0] = new PrimitiveUpdateField<float>(SpellCritPercentages[itr0 - 1].BitEnd, context);

            ShieldBlock = new PrimitiveUpdateField<float>(SpellCritPercentages[6].BitEnd, context);
            ShieldBlockCritPercentage = new PrimitiveUpdateField<float>(ShieldBlock.BitEnd, context);
            Mastery = new PrimitiveUpdateField<float>(ShieldBlockCritPercentage.BitEnd, context);
            ExploredZones = new BlobUpdateField(Mastery.BitEnd, 624, context);
            RestStateExperience = new PrimitiveUpdateField<uint>(ExploredZones.BitEnd, context);
            Coinage = new PrimitiveUpdateField<ulong>(RestStateExperience.BitEnd, context);

            ModDamageDonePos = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[7];
            ModDamageDonePos[0] = new PrimitiveUpdateField<int>(Coinage.BitEnd, context);
            for (var itr0 = 1; itr0 < 7; ++itr0)
                ModDamageDonePos[itr0] = new PrimitiveUpdateField<int>(ModDamageDonePos[itr0 - 1].BitEnd, context);


            ModDamageDoneNeg = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[7];
            ModDamageDoneNeg[0] = new PrimitiveUpdateField<int>(ModDamageDonePos[6].BitEnd, context);
            for (var itr0 = 1; itr0 < 7; ++itr0)
                ModDamageDoneNeg[itr0] = new PrimitiveUpdateField<int>(ModDamageDoneNeg[itr0 - 1].BitEnd, context);


            ModDamageDonePct = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[7];
            ModDamageDonePct[0] = new PrimitiveUpdateField<int>(ModDamageDoneNeg[6].BitEnd, context);
            for (var itr0 = 1; itr0 < 7; ++itr0)
                ModDamageDonePct[itr0] = new PrimitiveUpdateField<int>(ModDamageDonePct[itr0 - 1].BitEnd, context);

            ModHealingDonePos = new PrimitiveUpdateField<int>(ModDamageDonePct[6].BitEnd, context);
            ModHealingPct = new PrimitiveUpdateField<float>(ModHealingDonePos.BitEnd, context);
            ModHealingDonePct = new PrimitiveUpdateField<float>(ModHealingPct.BitEnd, context);

            WeaponDamageMultipliers = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[3];
            WeaponDamageMultipliers[0] = new PrimitiveUpdateField<float>(ModHealingDonePct.BitEnd, context);
            for (var itr0 = 1; itr0 < 3; ++itr0)
                WeaponDamageMultipliers[itr0] = new PrimitiveUpdateField<float>(WeaponDamageMultipliers[itr0 - 1].BitEnd, context);

            ModSpellPowerPCT = new PrimitiveUpdateField<float>(WeaponDamageMultipliers[2].BitEnd, context);
            OverrideSpellPowerByApPct = new PrimitiveUpdateField<float>(ModSpellPowerPCT.BitEnd, context);
            ModTargetResistance = new PrimitiveUpdateField<int>(OverrideSpellPowerByApPct.BitEnd, context);
            ModTargetPhysicalResistance = new PrimitiveUpdateField<int>(ModTargetResistance.BitEnd, context);
            FIELD_BYTES = new RawUpdateField<System.Byte>(ModTargetPhysicalResistance.BitEnd, context);
            SelfResurrectionSpell = new PrimitiveUpdateField<int>(FIELD_BYTES.BitEnd, context);
            PvPMedals = new PrimitiveUpdateField<int>(SelfResurrectionSpell.BitEnd, context);

            BuyBackPrices = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[12];
            BuyBackPrices[0] = new PrimitiveUpdateField<int>(PvPMedals.BitEnd, context);
            for (var itr0 = 1; itr0 < 12; ++itr0)
                BuyBackPrices[itr0] = new PrimitiveUpdateField<int>(BuyBackPrices[itr0 - 1].BitEnd, context);


            BuyBackTimestamp = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[12];
            BuyBackTimestamp[0] = new PrimitiveUpdateField<int>(BuyBackPrices[11].BitEnd, context);
            for (var itr0 = 1; itr0 < 12; ++itr0)
                BuyBackTimestamp[itr0] = new PrimitiveUpdateField<int>(BuyBackTimestamp[itr0 - 1].BitEnd, context);

            Kills = new RawUpdateField<System.UInt16>(BuyBackTimestamp[11].BitEnd, context);
            LifetimeHonorableKills = new PrimitiveUpdateField<int>(Kills.BitEnd, context);
            Bytes3 = new RawUpdateField<System.Byte>(LifetimeHonorableKills.BitEnd, context);
            WatchedFactionIndex = new PrimitiveUpdateField<int>(Bytes3.BitEnd, context);

            CombatRatings = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[26];
            CombatRatings[0] = new PrimitiveUpdateField<int>(WatchedFactionIndex.BitEnd, context);
            for (var itr0 = 1; itr0 < 26; ++itr0)
                CombatRatings[itr0] = new PrimitiveUpdateField<int>(CombatRatings[itr0 - 1].BitEnd, context);


            ArenaTeamInfos = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[21];
            ArenaTeamInfos[0] = new PrimitiveUpdateField<int>(CombatRatings[25].BitEnd, context);
            for (var itr0 = 1; itr0 < 21; ++itr0)
                ArenaTeamInfos[itr0] = new PrimitiveUpdateField<int>(ArenaTeamInfos[itr0 - 1].BitEnd, context);

            BattlegroundRating = new PrimitiveUpdateField<int>(ArenaTeamInfos[20].BitEnd, context);
            MaxLevel = new PrimitiveUpdateField<int>(BattlegroundRating.BitEnd, context);

            DailyQuests = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[25];
            DailyQuests[0] = new PrimitiveUpdateField<int>(MaxLevel.BitEnd, context);
            for (var itr0 = 1; itr0 < 25; ++itr0)
                DailyQuests[itr0] = new PrimitiveUpdateField<int>(DailyQuests[itr0 - 1].BitEnd, context);


            RuneRegen = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[4];
            RuneRegen[0] = new PrimitiveUpdateField<float>(DailyQuests[24].BitEnd, context);
            for (var itr0 = 1; itr0 < 4; ++itr0)
                RuneRegen[itr0] = new PrimitiveUpdateField<float>(RuneRegen[itr0 - 1].BitEnd, context);


            NoReagentCost = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[3];
            NoReagentCost[0] = new PrimitiveUpdateField<int>(RuneRegen[3].BitEnd, context);
            for (var itr0 = 1; itr0 < 3; ++itr0)
                NoReagentCost[itr0] = new PrimitiveUpdateField<int>(NoReagentCost[itr0 - 1].BitEnd, context);


            GlyphSlots = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[9];
            GlyphSlots[0] = new PrimitiveUpdateField<int>(NoReagentCost[2].BitEnd, context);
            for (var itr0 = 1; itr0 < 9; ++itr0)
                GlyphSlots[itr0] = new PrimitiveUpdateField<int>(GlyphSlots[itr0 - 1].BitEnd, context);


            Glyphs = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[9];
            Glyphs[0] = new PrimitiveUpdateField<int>(GlyphSlots[8].BitEnd, context);
            for (var itr0 = 1; itr0 < 9; ++itr0)
                Glyphs[itr0] = new PrimitiveUpdateField<int>(Glyphs[itr0 - 1].BitEnd, context);

            GlyphsEnabled = new PrimitiveUpdateField<int>(Glyphs[8].BitEnd, context);
            PetSpellPower = new PrimitiveUpdateField<int>(GlyphsEnabled.BitEnd, context);
            Researching = new BlobUpdateField(PetSpellPower.BitEnd, 32, context);
            ResearchSites = new BlobUpdateField(Researching.BitEnd, 32, context);

            ProfessionSkillLines = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[2];
            ProfessionSkillLines[0] = new PrimitiveUpdateField<int>(ResearchSites.BitEnd, context);
            for (var itr0 = 1; itr0 < 2; ++itr0)
                ProfessionSkillLines[itr0] = new PrimitiveUpdateField<int>(ProfessionSkillLines[itr0 - 1].BitEnd, context);

            UiHitModifier = new PrimitiveUpdateField<float>(ProfessionSkillLines[1].BitEnd, context);
            UiSpellHitModifier = new PrimitiveUpdateField<float>(UiHitModifier.BitEnd, context);
            HomeRealmTimeOffset = new PrimitiveUpdateField<int>(UiSpellHitModifier.BitEnd, context);
            ModHaste = new PrimitiveUpdateField<float>(HomeRealmTimeOffset.BitEnd, context);
            ModRangedHaste = new PrimitiveUpdateField<float>(ModHaste.BitEnd, context);
            ModPetHaste = new PrimitiveUpdateField<float>(ModRangedHaste.BitEnd, context);
            ModHasteRegen = new PrimitiveUpdateField<float>(ModPetHaste.BitEnd, context);

            BitCount = ModHasteRegen.BitEnd;
        }

        public void ProcessValuesUpdate(Packet packet, UpdateMask updateMask)
        {
            if (!updateMask.Any()) return;

            DuelArbiter.ReadValue(packet, updateMask);
            FLAGS.ReadValue(packet, updateMask);
            GuildRank.ReadValue(packet, updateMask);
            GuildDeleteDate.ReadValue(packet, updateMask);
            GuildLevel.ReadValue(packet, updateMask);
            Bytes0.ReadValue(packet, updateMask);
            Bytes1.ReadValue(packet, updateMask);
            Bytes2.ReadValue(packet, updateMask);
            DuelTeam.ReadValue(packet, updateMask);
            GuildTimestamp.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 50; ++itr0)
                QuestLog[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 19; ++itr0)
                VisibleItems[itr0].ReadValue(packet, updateMask);

            ChosenTitle.ReadValue(packet, updateMask);
            FakeInebriation.ReadValue(packet, updateMask);
            FIELD_PAD_0.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 74; ++itr0)
                InventorySlots[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 12; ++itr0)
                VendorBuyBackSlots[itr0].ReadValue(packet, updateMask);

            Farsight.ReadValue(packet, updateMask);
            KnownTitles.ReadValue(packet, updateMask);
            XP.ReadValue(packet, updateMask);
            NextLevelXP.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 64; ++itr0)
                SkillLineIDs[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 64; ++itr0)
                SkillSteps[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 64; ++itr0)
                SkillRanks[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 64; ++itr0)
                SkillMaxRanks[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 64; ++itr0)
                SkillModifiers[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 64; ++itr0)
                SkillTalents[itr0].ReadValue(packet, updateMask);

            CharacterPoints.ReadValue(packet, updateMask);
            TrackCreatures.ReadValue(packet, updateMask);
            TrackResources.ReadValue(packet, updateMask);
            Expertise.ReadValue(packet, updateMask);
            OffHandExpertise.ReadValue(packet, updateMask);
            BlockPercentage.ReadValue(packet, updateMask);
            DodgePercentage.ReadValue(packet, updateMask);
            ParryPercentage.ReadValue(packet, updateMask);
            CritPercentage.ReadValue(packet, updateMask);
            RangedCritPercentage.ReadValue(packet, updateMask);
            OffHandCritPercentage.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 7; ++itr0)
                SpellCritPercentages[itr0].ReadValue(packet, updateMask);

            ShieldBlock.ReadValue(packet, updateMask);
            ShieldBlockCritPercentage.ReadValue(packet, updateMask);
            Mastery.ReadValue(packet, updateMask);
            ExploredZones.ReadValue(packet, updateMask);
            RestStateExperience.ReadValue(packet, updateMask);
            Coinage.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 7; ++itr0)
                ModDamageDonePos[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 7; ++itr0)
                ModDamageDoneNeg[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 7; ++itr0)
                ModDamageDonePct[itr0].ReadValue(packet, updateMask);

            ModHealingDonePos.ReadValue(packet, updateMask);
            ModHealingPct.ReadValue(packet, updateMask);
            ModHealingDonePct.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 3; ++itr0)
                WeaponDamageMultipliers[itr0].ReadValue(packet, updateMask);

            ModSpellPowerPCT.ReadValue(packet, updateMask);
            OverrideSpellPowerByApPct.ReadValue(packet, updateMask);
            ModTargetResistance.ReadValue(packet, updateMask);
            ModTargetPhysicalResistance.ReadValue(packet, updateMask);
            FIELD_BYTES.ReadValue(packet, updateMask);
            SelfResurrectionSpell.ReadValue(packet, updateMask);
            PvPMedals.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 12; ++itr0)
                BuyBackPrices[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 12; ++itr0)
                BuyBackTimestamp[itr0].ReadValue(packet, updateMask);

            Kills.ReadValue(packet, updateMask);
            LifetimeHonorableKills.ReadValue(packet, updateMask);
            Bytes3.ReadValue(packet, updateMask);
            WatchedFactionIndex.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 26; ++itr0)
                CombatRatings[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 21; ++itr0)
                ArenaTeamInfos[itr0].ReadValue(packet, updateMask);

            BattlegroundRating.ReadValue(packet, updateMask);
            MaxLevel.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 25; ++itr0)
                DailyQuests[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 4; ++itr0)
                RuneRegen[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 3; ++itr0)
                NoReagentCost[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 9; ++itr0)
                GlyphSlots[itr0].ReadValue(packet, updateMask);


            for (var itr0 = 0; itr0 < 9; ++itr0)
                Glyphs[itr0].ReadValue(packet, updateMask);

            GlyphsEnabled.ReadValue(packet, updateMask);
            PetSpellPower.ReadValue(packet, updateMask);
            Researching.ReadValue(packet, updateMask);
            ResearchSites.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 2; ++itr0)
                ProfessionSkillLines[itr0].ReadValue(packet, updateMask);

            UiHitModifier.ReadValue(packet, updateMask);
            UiSpellHitModifier.ReadValue(packet, updateMask);
            HomeRealmTimeOffset.ReadValue(packet, updateMask);
            ModHaste.ReadValue(packet, updateMask);
            ModRangedHaste.ReadValue(packet, updateMask);
            ModPetHaste.ReadValue(packet, updateMask);
            ModHasteRegen.ReadValue(packet, updateMask);
        }
    }
}
