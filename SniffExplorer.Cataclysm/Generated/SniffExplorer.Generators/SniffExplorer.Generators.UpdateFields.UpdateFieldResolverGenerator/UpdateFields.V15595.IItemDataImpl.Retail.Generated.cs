// AUTOGENERATED FILE - DO NOT EDIT
// This file was generated by UpdateFieldResolverGenerator on 4/9/2021 11:13:30 PM.

using SniffExplorer.Parsing.Types;
using SniffExplorer.Parsing.Engine;
using SniffExplorer.Parsing.Engine.Tracking;
using SniffExplorer.Parsing.Engine.Tracking.UpdateFields;
using SniffExplorer.Parsing.Engine.Tracking.UpdateFields.Implementations;

namespace SniffExplorer.Cataclysm.UpdateFields.V4_3_4_15595.Retail
{
    [SniffExplorer.Shared.Attributes.Descriptors.GeneratedDescriptorAttribute(ClientBuild = 15595, RealmType = SniffExplorer.Shared.Enums.RealmExpansionType.Retail)]
    public class IItemDataImpl : SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IItemData
    {
        public int BitCount { get; }

        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Owner { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Contained { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Creator { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField GiftCreator { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField StackCount { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Duration { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] SpellCharges { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Flags { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[] Enchantments { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField PropertySeed { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField RandomPropertiesID { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField Durability { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField MaxDurability { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField CreatePlayedTime { get; }

        public IItemDataImpl(ParsingContext context)
        {
            Owner = new GuidUpdateField(0, context);
            Contained = new GuidUpdateField(Owner.BitEnd, context);
            Creator = new GuidUpdateField(Contained.BitEnd, context);
            GiftCreator = new GuidUpdateField(Creator.BitEnd, context);
            StackCount = new PrimitiveUpdateField<uint>(GiftCreator.BitEnd, context);
            Duration = new PrimitiveUpdateField<uint>(StackCount.BitEnd, context);

            SpellCharges = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[5];
            SpellCharges[0] = new PrimitiveUpdateField<uint>(Duration.BitEnd, context);
            for (var itr0 = 1; itr0 < 5; ++itr0)
                SpellCharges[itr0] = new PrimitiveUpdateField<uint>(SpellCharges[itr0 - 1].BitEnd, context);

            Flags = new PrimitiveUpdateField<uint>(SpellCharges[4].BitEnd, context);

            Enchantments = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField[15];
            Enchantments[0] = new StructuredUpdateField<SniffExplorer.Cataclysm.UpdateFields.Types.ItemEnchantment>(Flags.BitEnd, 3, context, values => new SniffExplorer.Cataclysm.UpdateFields.Types.ItemEnchantment(values));
            for (var itr0 = 1; itr0 < 15; ++itr0)
                Enchantments[itr0] = new StructuredUpdateField<SniffExplorer.Cataclysm.UpdateFields.Types.ItemEnchantment>(Enchantments[itr0 - 1].BitEnd, 3, context, values => new SniffExplorer.Cataclysm.UpdateFields.Types.ItemEnchantment(values));

            PropertySeed = new PrimitiveUpdateField<uint>(Enchantments[14].BitEnd, context);
            RandomPropertiesID = new PrimitiveUpdateField<uint>(PropertySeed.BitEnd, context);
            Durability = new PrimitiveUpdateField<uint>(RandomPropertiesID.BitEnd, context);
            MaxDurability = new PrimitiveUpdateField<uint>(Durability.BitEnd, context);
            CreatePlayedTime = new PrimitiveUpdateField<uint>(MaxDurability.BitEnd, context);

            BitCount = CreatePlayedTime.BitEnd;
        }

        public void ProcessValuesUpdate(Packet packet, UpdateMask updateMask)
        {
            if (!updateMask.Any()) return;

            Owner.ReadValue(packet, updateMask);
            Contained.ReadValue(packet, updateMask);
            Creator.ReadValue(packet, updateMask);
            GiftCreator.ReadValue(packet, updateMask);
            StackCount.ReadValue(packet, updateMask);
            Duration.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 5; ++itr0)
                SpellCharges[itr0].ReadValue(packet, updateMask);

            Flags.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 15; ++itr0)
                Enchantments[itr0].ReadValue(packet, updateMask);

            PropertySeed.ReadValue(packet, updateMask);
            RandomPropertiesID.ReadValue(packet, updateMask);
            Durability.ReadValue(packet, updateMask);
            MaxDurability.ReadValue(packet, updateMask);
            CreatePlayedTime.ReadValue(packet, updateMask);
        }
    }
}
