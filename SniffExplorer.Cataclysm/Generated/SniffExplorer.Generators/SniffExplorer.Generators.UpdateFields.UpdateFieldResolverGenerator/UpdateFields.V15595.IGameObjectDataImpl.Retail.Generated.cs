// AUTOGENERATED FILE - DO NOT EDIT
// This file was generated by UpdateFieldResolverGenerator on 4/9/2021 11:13:30 PM.

using SniffExplorer.Parsing.Types;
using SniffExplorer.Parsing.Engine;
using SniffExplorer.Parsing.Engine.Tracking;
using SniffExplorer.Parsing.Engine.Tracking.UpdateFields;
using SniffExplorer.Parsing.Engine.Tracking.UpdateFields.Implementations;

namespace SniffExplorer.Cataclysm.UpdateFields.V4_3_4_15595.Retail
{
    [SniffExplorer.Shared.Attributes.Descriptors.GeneratedDescriptorAttribute(ClientBuild = 15595, RealmType = SniffExplorer.Shared.Enums.RealmExpansionType.Retail)]
    public class IGameObjectDataImpl : SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IGameObjectData
    {
        public int BitCount { get; }

        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField<SniffExplorer.Parsing.Types.ObjectGUIDs.IObjectGUID> CreatedBy { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField<int> DisplayID { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField<uint> Flags { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField<float>[] ParentRotation { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField<ushort[]> Dynamic { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField<int> Faction { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField<int> Level { get; }
        public SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField<byte[]> Bytes { get; }

        public IGameObjectDataImpl(ParsingContext context)
        {
            CreatedBy = new GuidUpdateField(0, context);
            DisplayID = new PrimitiveUpdateField<int>(CreatedBy.BitEnd, context);
            Flags = new PrimitiveUpdateField<uint>(DisplayID.BitEnd, context);

            ParentRotation = new SniffExplorer.Parsing.Engine.Tracking.UpdateFields.IUpdateField<float>[4];
            ParentRotation[0] = new PrimitiveUpdateField<float>(Flags.BitEnd, context);
            for (var itr0 = 1; itr0 < 4; ++itr0)
                ParentRotation[itr0] = new PrimitiveUpdateField<float>(ParentRotation[itr0 - 1].BitEnd, context);

            Dynamic = new RawUpdateField<System.UInt16>(ParentRotation[3].BitEnd, context);
            Faction = new PrimitiveUpdateField<int>(Dynamic.BitEnd, context);
            Level = new PrimitiveUpdateField<int>(Faction.BitEnd, context);
            Bytes = new RawUpdateField<System.Byte>(Level.BitEnd, context);

            BitCount = Bytes.BitEnd;
        }

        public void ProcessValuesUpdate(Packet packet, UpdateMask updateMask)
        {
            if (!updateMask.Any()) return;

            CreatedBy.ReadValue(packet, updateMask);
            DisplayID.ReadValue(packet, updateMask);
            Flags.ReadValue(packet, updateMask);

            for (var itr0 = 0; itr0 < 4; ++itr0)
                ParentRotation[itr0].ReadValue(packet, updateMask);

            Dynamic.ReadValue(packet, updateMask);
            Faction.ReadValue(packet, updateMask);
            Level.ReadValue(packet, updateMask);
            Bytes.ReadValue(packet, updateMask);
        }
    }
}
